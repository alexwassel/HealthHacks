{"ast":null,"code":"import React from \"react\";\n\nfunction useDoubleClick(callback) {\n  const [elem, setElem] = React.useState(null);\n  const countRef = React.useRef(0);\n  const timerRef = React.useRef(null);\n  const inputCallbackRef = React.useRef(null);\n  const callbackRef = React.useCallback(node => {\n    setElem(node);\n    callbackRef.current = node;\n  }, []);\n  React.useEffect(() => {\n    inputCallbackRef.current = callback;\n  });\n  React.useEffect(() => {\n    function handler() {\n      const isDoubleClick = countRef.current + 1 === 2;\n      const timerIsPresent = timerRef.current;\n\n      if (timerIsPresent && isDoubleClick) {\n        clearTimeout(timerRef.current);\n        timerRef.current = null;\n        countRef.current = 0;\n\n        if (inputCallbackRef.current) {\n          inputCallbackRef.current();\n        }\n      }\n\n      if (!timerIsPresent) {\n        countRef.current = countRef.current + 1;\n        const timer = setTimeout(() => {\n          clearTimeout(timerRef.current);\n          timerRef.current = null;\n          countRef.current = 0;\n        }, 200);\n        timerRef.current = timer;\n      }\n    }\n\n    if (elem) {\n      elem.addEventListener(\"click\", handler);\n    }\n\n    return () => {\n      if (elem) {\n        elem.removeEventListener(\"click\", handler);\n      }\n    };\n  }, [elem]);\n  return [callbackRef, elem];\n}\n\nexport default useDoubleClick;","map":{"version":3,"sources":["/Users/alexwassel/Desktop/HealthHacks/src/utils/doubleClick.js"],"names":["React","useDoubleClick","callback","elem","setElem","useState","countRef","useRef","timerRef","inputCallbackRef","callbackRef","useCallback","node","current","useEffect","handler","isDoubleClick","timerIsPresent","clearTimeout","timer","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,KAAK,CAACK,QAAN,CAAe,IAAf,CAAxB;AACA,QAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAN,CAAa,CAAb,CAAjB;AACA,QAAMC,QAAQ,GAAGR,KAAK,CAACO,MAAN,CAAa,IAAb,CAAjB;AACA,QAAME,gBAAgB,GAAGT,KAAK,CAACO,MAAN,CAAa,IAAb,CAAzB;AACA,QAAMG,WAAW,GAAGV,KAAK,CAACW,WAAN,CAAkBC,IAAI,IAAI;AAC1CR,IAAAA,OAAO,CAACQ,IAAD,CAAP;AACAF,IAAAA,WAAW,CAACG,OAAZ,GAAsBD,IAAtB;AACH,GAHmB,EAGjB,EAHiB,CAApB;AAKAZ,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AAClBL,IAAAA,gBAAgB,CAACI,OAAjB,GAA2BX,QAA3B;AACH,GAFD;AAGAF,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AAClB,aAASC,OAAT,GAAmB;AACf,YAAMC,aAAa,GAAGV,QAAQ,CAACO,OAAT,GAAmB,CAAnB,KAAyB,CAA/C;AACA,YAAMI,cAAc,GAAGT,QAAQ,CAACK,OAAhC;;AACA,UAAII,cAAc,IAAID,aAAtB,EAAqC;AACjCE,QAAAA,YAAY,CAACV,QAAQ,CAACK,OAAV,CAAZ;AACAL,QAAAA,QAAQ,CAACK,OAAT,GAAmB,IAAnB;AACAP,QAAAA,QAAQ,CAACO,OAAT,GAAmB,CAAnB;;AACA,YAAIJ,gBAAgB,CAACI,OAArB,EAA8B;AAC1BJ,UAAAA,gBAAgB,CAACI,OAAjB;AACH;AACJ;;AACD,UAAI,CAACI,cAAL,EAAqB;AACjBX,QAAAA,QAAQ,CAACO,OAAT,GAAmBP,QAAQ,CAACO,OAAT,GAAmB,CAAtC;AACA,cAAMM,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3BF,UAAAA,YAAY,CAACV,QAAQ,CAACK,OAAV,CAAZ;AACAL,UAAAA,QAAQ,CAACK,OAAT,GAAmB,IAAnB;AACAP,UAAAA,QAAQ,CAACO,OAAT,GAAmB,CAAnB;AACH,SAJuB,EAIrB,GAJqB,CAAxB;AAKAL,QAAAA,QAAQ,CAACK,OAAT,GAAmBM,KAAnB;AACH;AACJ;;AACD,QAAIhB,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACkB,gBAAL,CAAsB,OAAtB,EAA+BN,OAA/B;AACH;;AAED,WAAO,MAAM;AACT,UAAIZ,IAAJ,EAAU;AACNA,QAAAA,IAAI,CAACmB,mBAAL,CAAyB,OAAzB,EAAkCP,OAAlC;AACH;AACJ,KAJD;AAKH,GA/BD,EA+BG,CAACZ,IAAD,CA/BH;AAgCA,SAAO,CAACO,WAAD,EAAcP,IAAd,CAAP;AACH;;AAED,eAAeF,cAAf","sourcesContent":["import React from \"react\";\n\nfunction useDoubleClick(callback) {\n    const [elem, setElem] = React.useState(null);\n    const countRef = React.useRef(0);\n    const timerRef = React.useRef(null);\n    const inputCallbackRef = React.useRef(null);\n    const callbackRef = React.useCallback(node => {\n        setElem(node);\n        callbackRef.current = node;\n    }, []);\n\n    React.useEffect(() => {\n        inputCallbackRef.current = callback;\n    });\n    React.useEffect(() => {\n        function handler() {\n            const isDoubleClick = countRef.current + 1 === 2;\n            const timerIsPresent = timerRef.current;\n            if (timerIsPresent && isDoubleClick) {\n                clearTimeout(timerRef.current);\n                timerRef.current = null;\n                countRef.current = 0;\n                if (inputCallbackRef.current) {\n                    inputCallbackRef.current();\n                }\n            }\n            if (!timerIsPresent) {\n                countRef.current = countRef.current + 1;\n                const timer = setTimeout(() => {\n                    clearTimeout(timerRef.current);\n                    timerRef.current = null;\n                    countRef.current = 0;\n                }, 200);\n                timerRef.current = timer;\n            }\n        }\n        if (elem) {\n            elem.addEventListener(\"click\", handler);\n        }\n\n        return () => {\n            if (elem) {\n                elem.removeEventListener(\"click\", handler);\n            }\n        };\n    }, [elem]);\n    return [callbackRef, elem];\n}\n\nexport default useDoubleClick;"]},"metadata":{},"sourceType":"module"}